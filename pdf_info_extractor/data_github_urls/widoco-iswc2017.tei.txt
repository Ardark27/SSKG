preserve
http://www.tei-c.org/ns/1.0
http://www.w3.org/2001/XMLSchema-instance
http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd
http://www.w3.org/1999/xlink
en
a
main
WIDOCO: A Wizard for Documenting Ontologies
unknown
corresp
first
Daniel
Garijo
dgarijo@isi.edu
aff0
department
Information Sciences Institute
institution
University of Southern California
4676 Admiralty Way
aff1
institution
Marina del Rey CA
90292
US
USA
a
main
WIDOCO: A Wizard for Documenting Ontologies
MD5
15F6FCA40E0AC1C16F02EDBE8D9E6CB2
DOI
10.5281/zenodo.591294
0.7.1
GROBID
2022-12-02T11:44+0000
GROBID - A machine learning software for extracting information from scholarly documents
https://github.com/kermitt2/grobid
Ontology documentation
Ontology evolution
Ontology understanding
OWL Ontologies Resource Type: Software
http://www.tei-c.org/ns/1.0
In this paper we describe WIDOCO, a WIzard for DOCumenting Ontologies that guides users through the documentation process of their vocabularies. Given an RDF vocabulary, WIDOCO detects missing vocabulary metadata and creates a documentation with diagrams, human readable descriptions of the ontology terms and a summary of changes with respect to previous versions of the ontology. The documentation consists on a set of linked enriched HTML pages that can be further extended by end users. WIDOCO is open source and builds on well established Semantic Web tools. So far, WIDOCO has been used to document more than one hundred ontologies in different domains.
en
http://www.tei-c.org/ns/1.0
1
Introduction
bibr
#b10
[11]
bibr
#b8
[9]
Ontology engineering methodologies acknowledge reuse of existing vocabularies as a crucial step when developing a new ontology . Therefore, ontology authors often provide a human-readable documentation of their vocabularies, in order to facilitate their understanding and adoption by other researchers .
There are three main aspects related to ontology documentation. The first one is creating a human-readable representation of the content of the ontology: metadata, definition of classes and properties, visualization (e.g., diagrams relating the different concepts) and versioning (explanation of the difference between versions of the ontologies). The second aspect is creating machine-readable annotations of documentation metadata (e.g., provenance, snippets for facilitating vocabulary discovery by search engines) and the third aspect is preparing the documentation files to be accessed as a web resource (doing content negotiation).
bibr
#b7
[8]
bibr
#b8
[9]
bibr
#b11
[12]
Related work has been proposed to facilitate some of these aspects. For example, ontology editors like Protégé , have plugins for automatically creating an HTML documentation with the definition of classes and properties. 1 Similarly, approaches like LODE  or Parrot  provide drag-and-drop services to automatically document ontology terms. However, most approaches are typically designed for Semantic Web experts, presenting some of the following issues:
bibr
#b8
[9]
bibr
#b4
[5]
1. Lack of guidelines and best practices for ontology documentation: users developing ontologies may not know which are the common terms used to describe the metadata of their ontologies. These metadata are important, because they are used by existing tools to create human readable descriptions of an ontology. 2. Lack of ontology metadata completion: Current efforts do not indicate which key information may be missing when documenting an ontology. 3. Lack of an ecosystem for ontology documentation and customization: most existing approaches focus on specific aspects of ontology documentation. On the one hand, approaches like LODE  generate a human readable description of the classes and properties of a given ontology, but neglect the generation of diagrams. On the other hand, tools like WebVowl  create dynamic visualizations of ontologies, but do not deal with the generation of text. Integrating the outcome of these and other tools and customizing them according to user preferences takes time, especially to non programmers.
bibr
#b8
[9]
bibr
#b4
[5]
bibr
#b5
[6]
In this paper we describe WIDOCO, a wizard for documenting ontologies designed to tackle these issues in an automated way. WIDOCO takes as input an annotated RDF vocabulary (e.g., an OWL file with labels and definitions for its concepts) and generates a set of linked HTML pages containing a human readable description of the ontology. 2 WIDOCO guides users through the steps to be followed when documenting an ontology, relying on common best practices and indicating missing metadata that should be included. WIDOCO also facilitates customizing the produced documentation, enabling users to select which aspects they want to include in their document (e.g., sections, diagrams, provenance information, etc.). WIDOCO integrates and extends well established tools, like LODE  for term documentation, WebVowl  for interactive diagram creation, Bubastis  for adding automated change logs between versions and web services like Licensius 3 for completing ontology metadata. In addition, WIDOCO enriches the documentation with snippets discoverable by search engines, prepares content negotiation files for an ontology using W3C best practices, exposes the documentation in multiple languages and exports provenance information of the creation process. We consider that these features make WIDOCO a useful resource for documenting ontologies, and so far we have received positive feedback from the community.
The rest of the paper is structured as follows: a description of the main features of WIDOCO in shown in Section 2. Section 3 discusses the community adoption of the proposed resource, followed by a brief overview of related work describing approaches for ontology documentation in Section 4. Finally, Section 5 points out future directions of work.
figure
1
Fig. . Overview of WIDOCO: Given an ontology file with metadata and definitions for its ontology terms, WIDOCO generates a set of linked HTML files (linked through a nexus file) with definitions of terms, an interactive diagram, an explanation of changes from previous versions and annotations of the ontology document itself (provenance file). In addition, the system generates a file for facilitating documentation publication through content negotiation (.htaccess).
http://www.tei-c.org/ns/1.0
2
WIDOCO: A Wizard for Documenting Ontologies
WIDOCO is a standalone java application developed to help users documenting their ontologies. Given an ontology file or URL as input, WIDOCO guides the user through a wizard that generates a customized enriched HTML documentation of the ontology. In this section we describe the main features of WIDOCO in Section 2.1, explaining the steps to be followed by users on WIDOCO's wizard in Section 2.2 and how users may extend the generated documentation on Section 2.3.
http://www.tei-c.org/ns/1.0
2.1
WIDOCO Overview
figure
1
bibr
#b3
[4]
Figure  shows an overview of the different aspects of the documentation process tackled by WIDOCO. Users provide as input to the system a URI or file with metadata annotations (e.g., creators, title, contributors, license, etc.) and definitions for the different ontology terms. After following the steps of the wizard, WIDOCO generates a customized documentation with the most relevant metadata of the ontology. The documentation is composed by a set of linked HTML files, including a main nexus file and several section files. Each section file describes the content of part of the documentation (e.g., abstract, definition of ontology terms, overview diagrams, etc.) while the nexus file links all the sections together. In addition, WIDOCO generates separate provenance records about the ontology documentation and annotates the nexus file with JSON-LD snippets, 4 which help search engines discovering the ontology metadata. Finally, WIDOCO prepares a content negotiation file and serializations of the ontology to facilitate serving the documentation and ontology in different formats. WIDOCO's features are further described below: Documenting Relevant Ontology Metadata: WIDOCO uses the OWL API  to process and recognize over forty properties for ontology metadata description from common vocabularies and standards. These terms have been grouped in metadata categories and collected in a best practices document, 5 including a rationale of their importance when describing a vocabulary. Some examples of metadata categories are vocabulary access (e.g., namespace URI that should be used to dereference the vocabulary), attribution(e.g., creators, contributors or publishers), provenance (e.g., creation date, sources, previous versions) or citation (e.g., DOI of the vocabulary, how to cite it) among others.
bibr
#b4
[5]
Ontology Visualization: We have reused WebVowl  to add an interactive diagram to the documentation. The diagram is a useful aid, as it simplifies the visualization in bigger ontologies (automatically filtering loosely connected terms) and helps having an overview of the main properties and classes. WIDOCO transforms the ontology into the format required by WebVowl and saves the result as a separated HTML file.
bibr
#b8
[9]
bibr
#b5
[6]
Ontology Terms Documentation: WIDOCO builds on top of LODE , an open source tool designed to generate an HTML file with the definition of classes, properties, data properties and individuals of an ontology, based on the annotations made by the user. WIDOCO extends LODE by expanding the properties a user may use to qualify a term in the ontology. For example, LODE uses rdfs:label to represent the names of ontology terms, and rdfs:comment to describe their definition in the HTML documentation. However, users may use other similar properties for this purpose, such as skos:label and skos:definition. WIDOCO includes these properties and recognizes new properties to qualify ontology terms, such as examples of concepts or their rationale for inclusion in the ontology. These properties are also part of the list of best practices for ontology metadata description mentioned above. 5   Explaining Changes from Previous Versions: Ontologies are likely to evolve, being released in different versions. In these cases, part of the documentation is targeted towards explaining the differences from the last version of the ontology. WIDOCO expands Bubastis , a software for capturing differences between classes in ontologies automatically, adding also which are the object properties, data properties and annotations that have changed from version to version.
bibr
#b6
[7]
figure
2
Provenance: WIDOCO produces a separate page, linked to the nexus file of the documentation, with the statements that refer to the provenance of the documentation itself (sources, previous versions, authors, etc.). The page is captured both in a human readable and machine readable way, following the PROV-O standard . Fig. . Snapshot of the wizard for gathering ontology metadata: WIDOCO will automatically extract all available metadata from the ontology, showing missing properties that may be included in the documentation.
Semantic annotations: WIDOCO includes JSON-LD snippets on the nexus HTML file with a description of the ontology metadata annotated according to Schema.org. 6 These snippets are useful for search engines to find and explore the metadata of the ontology documentation automatically.
Ontology Serialization and Content Negotiation: WIDOCO automatically creates an .htaccess file to access the documentation through its URI once it is published online. We have adopted the W3C best practices for vocabulary publishing on the Web, 7 adapting content negotiation to the vocabulary URI (hash versus slash vocabularies) and preparing the .htaccess file to serve (by default) the RDF/XML, TTL and N3 serializations.
http://www.tei-c.org/ns/1.0
2.2
Guiding Users Through the Documentation Process
WIDOCO consists on a wizard that helps users create, customize and enrich a documentation for their ontologies automatically. The main steps are:
figure
2 (A)
figure
#fig_0
3
bibr
#b9
[10]
1. Metadata collection: After selecting an ontology, WIDOCO will load it and fill a table of recommended metadata values, as shown in Figure . If a metadata field is not found in the ontology, the corresponding value will appear blank in the table (B), so users can complete it if desired. Users may also choose to let WIDOCO look for the license name and URL used in the ontology (C) by querying the Licensius web service and license dataset. 8  Alternatively, ontology metadata may be loaded from a file using a key value pair (D). This option is useful when several ontologies share common metadata but do not have their ontology files annotated. Finally, this step of the wizard also lets the user select the languages in which the documentation will be generated (E). Metadata loaded in the table is customized to the selected language, which is useful when generating a documentation in multiple languages. 2. Customization: In this step a user can select whether to include or not each of the features of WIDOCO in the final documentation. Figure  shows an overview of the different options: include default sections (i.e., introduction, overview, description and references) or load them from existing files, include annotation properties or individuals as part of the ontology documentation; export the provenance of the vocabulary as a separated page, create an .htaccess file to handle content negotiation for the ontology, include an interactive diagram and show the changes with respect to the last version of the ontology. In addition, users may choose between two different CSS styles for the documentation. 3. Ontology browsing: the final step of the wizard shows up after the documentation has been generated successfully, allowing opening it on a local web browser. This step also enables users to produce evaluation reports of the ontology, facilitating checking whether the ontology has any design flaws or not. WIDOCO produces these reports by using the OOPS! web service , which evaluates ontologies against a catalog of pitfalls.
http://www.tei-c.org/ns/1.0
2.3
Extending the generated documentation
WIDOCO organizes its output to be easily modified, allowing users to expand their documentation with additional narratives and diagrams. Each of the sections included in the documentation (e.g, abstract, introduction, description, cross reference, etc.) are separated in individual HTML files, which can be edited individually. If new sections or subsections are added to any existing page, all section numbers and table of contents will be updated consistently. Furthermore, WIDOCO supports Markdown, 9 which is generally easier to edit than HTML.
http://www.tei-c.org/ns/1.0
3
Usage and Community Adoption
bibr
#b0
[1]
bibr
#b2
[3]
WIDOCO started as a simple wizard to help non-programmers documenting their ontologies. Due to the uptake and suggestions by users, we have progressively added new functionality (e.g., supporting new types of metadata, creating diagrams, etc.) and expanded the user base. To date, WIDOCO has been used to document more than a hundred ontologies in different domains, 10 ranging from earth sciences to bio-informatics. WIDOCO has also been adopted by tools for supporting ontology engineering such as OnToology  and VoCol . Thanks to our interactions with the community, we have developed a benchmark of vocabularies to test and validate WIDOCO. 11 The benchmark aggregates 35 real-world ontologies with different characteristics for generating documentation, such as incomplete metadata, availability in different formats, sizes or languages, unavailability of imported ontologies, etc.
WIDOCO is available in GitHub, 12 where users can download it, open issues or ask for help. WIDOCO is released under an Apache-2.0 license. 13
http://www.tei-c.org/ns/1.0
4
Related Work
bibr
#b8
[9]
bibr
#b11
[12]
bibr
#b5
[6]
bibr
#b4
[5]
bibr
#b1
[2]
bibr
#b2
[3]
bibr
#b0
[1]
Many approaches have been developed to help create human readable description of ontologies. These often focus on concrete aspects of ontology documentation, including human-readable definitions (e.g, LODE , Parrot , etc.), differences between versions of ontologies (e.g., Bubastis ) or diagram creation (e.g., WebVowl ). Other efforts describe end-to-end frameworks for publishing and versioning ontologies, such as Neologism , VoCol  or OnToology . To our knowledge, WIDOCO is the only approach that includes guidance for users during the documentation process, helping them to complete and enrich their metadata while customizing their final documentation.
http://www.tei-c.org/ns/1.0
5
Conclusions and Future Work
In this paper we have described WIDOCO, a wizard for documenting and customizing ontologies which a) guides users through the documentation process; b) helps identifying missing metadata in the ontology and c) extends and integrates existing work for documenting ontology terms, diagram visualizations and ontology revisions. WIDOCO has been used to document more than one hundred ontologies across different domains, and has been adopted by other existing efforts like OnToology and VoCol.
WIDOCO is an ongoing effort, and we are open to suggestions proposed by the community. In fact, we have already addressed several issues raised by adopters of the tool. Our future work aims to facilitate filtering and enrichment of ontology terms to be included in the documentation with external metadata.
http://www.tei-c.org/ns/1.0
fig_0
Fig. 3 .
3
Fig. 3. An overview of the options for customizing the documentation of a vocabulary.
6,134.77,115.84,345.84,93.34
bitmap
http://www.tei-c.org/ns/1.0
3,134.77,115.84,345.83,152.06
bitmap
http://www.tei-c.org/ns/1.0
5,152.06,115.84,311.24,192.65
bitmap
http://www.tei-c.org/ns/1.0
foot
1
https://protegewiki.stanford.edu/wiki/OWLDoc
http://www.tei-c.org/ns/1.0
foot
2
An overview with examples can be accessed online: https://w3id.org/widoco/gallery 3 http://licensius.com/
http://www.tei-c.org/ns/1.0
foot
4
https://www.w3.org/TR/json-ld/
http://www.tei-c.org/ns/1.0
foot
5
https://w3id.org/widoco/bestPractices
http://www.tei-c.org/ns/1.0
foot
6
http://schema.org/ 7 https://www.w3.org/TR/swbp-vocab-pub/
http://www.tei-c.org/ns/1.0
foot
8
http://licensius.com/apidoc/index.html
acknowledgement
http://www.tei-c.org/ns/1.0
Acknowledgements
We would like to acknowledge support from the US National Science Foundation with grants ICER-1541029 and ICER-1440323, and from the National Institutes of Health with grant 1R01GM117097-01. We also thank Yolanda Gil for her feedback.
references
b0
m
main
Ontoology, a tool for collaborative development of ontologies
first
A
Alobaid
first
D
Garijo
first
M
Poveda-Villalón
first
I
middle
S
Pérez
first
O
Corcho
published
2015
2015
ICBO
b1
first
C
Basca
first
S
Corlosquet
first
R
Cyganiak
first
S
Fernndez
first
T
Sch
published
2012
2012
Neologism: Easy Vocabulary Publishing
b2
a
main
Vocol: An integrated environment to support version-controlled vocabulary development
first
L
Halilaj
first
N
Petersen
first
I
Grangel-González
first
C
Lange
first
S
Auer
first
G
Coskun
first
S
Lohmann
m
Proceedings of the 20th Knowledge Engineering and Knowledge Management -EKAW 2016
Bologna, Italy
the 20th Knowledge Engineering and Knowledge Management -EKAW 2016
published
2016
2016
page
303
319
b3
a
main
The OWL API: A java api for owl ontologies
first
M
Horridge
first
S
Bechhofer
j
Semant. web
volume
2
issue
1
page
11
21
published
2011
2011
b4
m
main
WebVOWL: Web-based Visualization of Ontologies
first
S
Lohmann
first
V
Link
first
E
Marbach
first
S
Negru
published
2015
2015
Springer International Publishing
page
154
158
Cham
b5
a
main
Modeling sample variables with an experimental factor ontology
first
J
Malone
first
E
Holloway
first
T
Adamusiak
first
M
Kapushesky
first
J
Zheng
first
N
Kolesnikov
first
A
Zhukova
first
A
Brazma
first
H
Parkinson
j
Bioinformatics
volume
26
issue
8
page
1112
published
2010
2010
b6
first
D
Mcguinness
first
T
Lebo
first
S
Sahoo
first
K
Belhajjame
first
J
Cheney
first
D
Corsar
first
D
Garijo
first
S
Soiland-Reyes
first
S
Zednick
first
J
Zhao
m
PROV-o: The PROV ontology. W3C recommendation
published
2013
2013
page
W3C
b7
a
main
The Protégé project: A look back and a look forward
first
M
middle
A
Musen
DOI
10.1145/2757001.2757003
http://doi.acm.org/10.1145/2757001.2757003
j
AI Matters
volume
1
issue
4
page
4
12
published
2015
2015
b8
m
main
The Live OWL Documentation Environment: A Tool for the Automatic Generation of Ontology Documentation
first
S
Peroni
first
D
Shotton
first
F
Vitali
page
398
412
b9
a
main
OOPS! (OntOlogy Pitfall Scanner!): An on-line tool for ontology evaluation
first
M
Poveda-Villalón
first
M
middle
C
Suárez-Figueroa
first
A
Gómez-Pérez
j
International Journal on Semantic Web and Information Systems
volume
10
issue
2
page
7
10
published
2014
2014
IJSWIS)
b10
a
main
The NeOn Methodology framework: A scenario-based methodology for ontology development
first
M
middle
C
Suárez-Figueroa
first
A
Gómez-Pérez
first
M
Fernández-López
j
Applied Ontology
volume
10
issue
2
page
107
145
published
2015
2015
b11
m
main
Metadata for Web Ontologies and Rules: Current Practices and Perspectives
first
C
Tejo-Alonso
first
D
Berrueta
first
L
Polo
first
S
Fernández
published
2011
2011
Springer
page
56
67
Berlin Heidelberg; Berlin, Heidelberg